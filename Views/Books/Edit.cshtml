@model Asp_Web_Lib.Models.Book

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-container">
        <h4>@Model.Title</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-grid">
            <div class="column">
                <div class="form-group">
                    @Html.LabelFor(model => model.Title, new { @class = "control-label label-above" })
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ISBN, new { @class = "control-label label-above" })
                    @Html.EditorFor(model => model.ISBN, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ISBN, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.PublicationYear, new { @class = "control-label label-above" })
                    @Html.EditorFor(model => model.PublicationYear, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PublicationYear, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.CoverImage, new { @class = "control-label label-above" })
                    @Html.EditorFor(model => model.CoverImage, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CoverImage, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="column">
	            <div class="form-group">
		            @Html.LabelFor(model => model.CategoryId, "Category", new { @class = "control-label label-above" })
		            @Html.DropDownList("CategoryId", null, new { @class = "form-control" })
		            @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
	            </div>
	            <div class="form-group">
		            @Html.LabelFor(model => model.Description, new { @class = "control-label label-above" })
		            @Html.TextAreaFor(model => model.Description, new { @class = "form-control description-box" })
		            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
	            </div>
	            <div class="form-group submit-container">
		            <input type="submit" value="Save" class="btn btn-default" />
	            </div>
            </div>
            <div class="column">
	            <div class="form-group">
		            @Html.LabelFor(model => model.PublisherId, "Publisher", new { @class = "control-label label-above" })
		            @Html.DropDownList("PublisherId", null, new { @class = "form-control" })
		            @Html.ValidationMessageFor(model => model.PublisherId, "", new { @class = "text-danger" })
	            </div>
	            <div class="form-group">

		            @Html.Label("Authors", new { @class = "control-label label-above" })
		            <div class="custom-multiselect">
			            @Html.ListBox("SelectedAuthorIds", (MultiSelectList)ViewBag.SelectedAuthorIds, new { @class = "form-control" })
		            </div>
		            @Html.ValidationMessage("SelectedAuthorIds", "", new { @class = "text-danger" })
	            </div>
            </div>
        </div>

       
    </div>
}

<div class="back-link">
    @Html.ActionLink("Back to List", "Index")
</div>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		const multiSelect = document.querySelector(".custom-multiselect");
		const select = multiSelect.querySelector("select");
		const dropdown = document.createElement("div");
		dropdown.classList.add("dropdown");

		Array.from(select.options).forEach(option => {
			const label = document.createElement("label");
			const input = document.createElement("input");
			input.type = "checkbox";
			input.value = option.value;
			input.addEventListener("change", () => {
				if (input.checked) {
					select.querySelector(`[value='${input.value}']`).selected = true;
				} else {
					select.querySelector(`[value='${input.value}']`).selected = false;
				}
			});
			label.appendChild(input);
			label.appendChild(document.createTextNode(option.text));
			dropdown.appendChild(label);
		});

		multiSelect.appendChild(dropdown);

		multiSelect.addEventListener("click", function (event) {
			multiSelect.classList.toggle("active");
			event.stopPropagation();
		});

		document.addEventListener("click", function () {
			multiSelect.classList.remove("active");
		});
	});
</script>

<style>
    .form-container {
        font-family: Arial, sans-serif;
        margin: 2rem auto;
        padding: 1.5rem;
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        color: #333333;
        width: auto;
        min-width: 90%;
        max-width: 100%;
    }

    .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        gap: 10rem;
        width: 100%;
    }

    .column {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .submit-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;

    }

    .back-link {
        text-align: center;
        margin-top: 20px;
    }

    .description-box {
        height: 10rem;
    }

    .label-above {
        display: block;
        margin-bottom: 5px;
    }

    .custom-multiselect select {
        display: none;
    }

    .custom-multiselect {
        position: relative;
        display: inline-block;
        width: 100%;
    }

        .custom-multiselect::after {
            content: "▼";
            position: absolute;
            top: 50%;
            right: 10px;
            transform: translateY(-50%);
            pointer-events: none;
        }

    .btn-default {
        display: block;
        text-align: center;
	    width: 80%;
	    margin: 0 2rem 0 1rem;
        background-color: #c71585;
        color: white;
        text-decoration: none;
        border-radius: 5px;
    }
        .btn-default:hover {
            background-color: #333333;
            color: #F495D1;
        }

</style>
@Styles.Render("~/Content/Styles/ModelPanel.css")
